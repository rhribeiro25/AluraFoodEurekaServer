@startuml

title Confirming payment

actor customer as user
participant "order.js" as orderForm <<(C,#ADD1B2) Order Form Controller>>
participant "payment.js" as paymentForm <<(C,#ADD1B2) Payment Form Controller>>
participant "OrderService.java" as orderService <<(C,#ADD1B2) Orders Service>>
participant "OrderRepository.java" as orderRepository <<(C,#ADD1B2) Orders Repository>>
participant "PaymentsRabbitListener.java" as paymentsRabbitListenerOrder <<(C,#ADD1B2) Payment Listener Messages>>
participant "EvaluationService.java" as evaluationService <<(C,#ADD1B2) Evaluation Service>>
participant "EvaluationRepository.java" as evaluationRepository <<(C,#ADD1B2) Evaluation Repository>>
participant "OrderClient.java" as orderClient <<(C,#ADD1B2) Order Client>>
participant "PaymentsRabbitListener.java" as paymentsRabbitListenerEvaluation <<(C,#ADD1B2) Payment Listener Messages>>
participant "PaymentService.java" as paymentService <<(C,#ADD1B2) Payment Service>>
participant "PaymentRepository.java" as paymentRepository <<(C,#ADD1B2) Payment Repository>>
participant "PaymentsRabbitTemplate.java" as paymentsRabbitTemplate <<(C,#ADD1B2) Payment Publish messages >>
database PostgreSQL as postgres
queue RabbitMQ as rabbit

box "Actor" #LightSeaGreen
    participant user
end box

box "AluraFood Web" #LightBlue
    participant orderForm
    participant paymentForm
end box

box "Order Microservice" #LightGreen
    participant orderService
    participant orderRepository
    participant paymentsRabbitListenerOrder
end box

box "Payment Microservice" #LightGreen
    participant paymentService
    participant paymentRepository
    participant paymentsRabbitTemplate
end box

box "Evaluation Microservice" #LightGreen
    participant evaluationService
    participant evaluationRepository
    participant orderClient
    participant paymentsRabbitListenerEvaluation
end box

box "Database" #MediumBlue
    participant postgres
end box

box "Message Broker" #DarkOrange
    participant rabbit
    participant kaf
end box

alt Payment Actions
    user -> paymentForm : confirmPayment()
    paymentForm -> paymentService : confirmPayment()
    paymentService -> paymentRepository : save()
    paymentRepository -> postgres : persisting data
    postgres -> paymentRepository : Successful update
    paymentRepository -> paymentService : Status 200
    paymentService -> paymentsRabbitTemplate : sendPaymentsConfirmed()
    paymentsRabbitTemplate -> rabbit : Publishing message
    rabbit -> paymentsRabbitTemplate : message posted
    paymentsRabbitTemplate -> paymentService : Status 200
    paymentService -> paymentForm : Status 200
    paymentForm -> user : result = Successful updating
end alt

alt Updating payment data in order microservice by RabbitMQ Actions
    paymentsRabbitListenerOrder -> rabbit : getPaymentsConfirmedMsg()
    rabbit -> paymentsRabbitListenerOrder : if exists message
    paymentsRabbitListenerOrder -> orderService : updatePaymentStatus()
    orderService -> orderRepository : save()
    orderRepository -> postgres : update data
    postgres -> orderRepository : Successful update
    orderRepository -> orderService : Status 200
end alt

alt Updating payment data in evaluation microservice by RabbitMQ Actions
    paymentsRabbitListenerEvaluation -> rabbit : getPaymentsConfirmedMsg()
    rabbit -> paymentsRabbitListenerEvaluation : if exists message
    paymentsRabbitListenerEvaluation -> evaluationService :createPendingEvaluation()
    evaluationService -> orderClient : getOrderById()
    orderClient -> orderService : findById()
    orderService -> orderClient : Status 200
    orderClient -> evaluationService : Order Json
    evaluationService -> evaluationService : Setting Evaluation Status to PENDING and points to 0.0
    evaluationService -> evaluationRepository : save()
    evaluationRepository -> postgres : persisting data
    postgres -> evaluationRepository : Successful persistence
    evaluationRepository -> evaluationService : Status 201
end alt
@enduml